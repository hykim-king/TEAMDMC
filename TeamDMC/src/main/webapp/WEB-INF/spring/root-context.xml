<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    
    <!-- Root Context: defines shared resources visible to all other web components -->
    <!-- * 해당 root-context는 필수적인 transaction 등등의 정보만 들어가게 됨.
         * 우리가 applicationContext에서 썼던 Dao bean같은 것들은 bean으로 만들지 않고 annotation으로 설정을 함 -->
         
    <!-- MyBatis db연결 객체 -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
    </bean>        
                
    <!-- MyBatis설정: 환경설정 읽기 -->
    <!-- configLocation: mybatis-config.xml -->
    <!-- mapper: mapper/**/*.xml => mapper폴더 안의 모든 디렉토리 안의 모든.xml파일 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"></property>
    </bean>

    <!-- 개발에 사용하는 Dummy Mail Sender -->
    <!-- <bean id="dummyMailSender" class="com.pcwk.ehr.cmn.DummyMailSender"></bean> -->
    
    <!-- Naver smtp 계정 -->
    <bean id="mailSenderImpl" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.naver.com"/>
        <property name="port" value="465"/>
        <property name="username" value="xodnr571@naver.com"/>
        <property name="password" value="Before1223@"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.host">smtp.naver.com</prop>
                <prop key="mail.smtp.port">465</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
                <prop key="mail.smtp.ssl.enable">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
    
    <!-- JDBC DataSourceTransactionManager -->
    <bean id= "transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
     
    <!-- 트랜잭션 어드바이스 설정 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- do로 시작하는 모든 메소드는 트랜잭션 관리 대상에서 제외한다.(read-only=true) -->
            <tx:method name="do*" read-only="true"/>
            <!-- up으로 시작하는 모든 메소드는 트랜잭션 관리 대상이다.(read-only=false) -->
            <tx:method name="up*" read-only="false"/>
        </tx:attributes>
    </tx:advice>
     
    <!-- pointcut *Service : com.pcwk.ehr.user.service -->
    <aop:config>
        <aop:pointcut expression="execution(* com.pcwk.ehr..service.*Impl.*(..))" id="txPointCut"/>
        <!-- 트랜잭션 처리를 위한 advisor: advice + pointcut이 결합된 기능 -->
        <aop:advisor advice-ref="txAdvice" 
                     pointcut-ref="txPointCut" />
    </aop:config>      
         
    <!-- database.properties read -->
    <context:property-placeholder location="classpath:/resource/config/database.properties" />
    
    <!-- DataSource를 구현한 BasicDataSource Bean 객체 생성 -->
        <!-- bean태그에서 id는 해당 태그를 식별할 수 있는 식별자이고 class는 java 파일의 url을 넣으면
                Spring IoC 컨테이너(ApplicationContext)에 객체가 만들어져 해당 파일 안에 객체를 담게 된다. -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" >
        <!-- public SimpleDriverDataSource(Driver driver, String url, String username, String password)
            SimpleDriverDataSource 메서드에 4개의 param 전달 -->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!-- 최대 접속 허용 갯수 -->
        <property name="maxActive" value="${jdbc.maxActive}"></property>
        <!-- 여분으로 남겨질 Connection -->
        <property name="maxIdle" value="${jdbc.maxIdle}"></property>
        <!-- DB연결 대기 시간 -->
        <property name="maxWait" value="${jdbc.maxWait}"></property>
        <!-- Connection 잘못 관리되어 버려진 연결 찾아 재활용 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"></property>
        <!-- 버려진 연결로  인식할 기본 시간 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"></property>        
    </bean>
    
</beans>
